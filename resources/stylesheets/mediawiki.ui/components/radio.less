// Radio
//
// Styling radios in a way that works cross browser is a tricky problem to solve.
// In MediaWiki UI put a radio and label inside a mw-ui-radio div.
// This renders in all browsers except IE 6-8 which do not support the :checked selector;
// these are kept backwards-compatible using the `:not( #noop )` selector.
// You should give the radio and label matching "id" and "for" attributes, respectively.
//
// Markup:
// <div class="mw-ui-radio">
//   <input type="radio" id="kss-example-4" name="kss-example-4">
//   <label for="kss-example-4">Standard radio</label>
// </div>
// <div class="mw-ui-radio">
//   <input type="radio" id="kss-example-4-checked" name="kss-example-4" checked>
//   <label for="kss-example-4-checked">Standard checked radio</label>
// </div>
// <div class="mw-ui-radio">
//   <input type="radio" id="kss-example-4-disabled" name="kss-example-4-disabled" disabled>
//   <label for="kss-example-4-disabled">Disabled radio</label>
// </div>
// <div class="mw-ui-radio">
//   <input type="radio" id="kss-example-4-disabled-checked" name="kss-example-4-disabled" disabled checked>
//   <label for="kss-example-4-disabled-checked">Disabled checked radio</label>
// </div>
//
// Styleguide 4.

// We use the not selector to cancel out styling on IE 8 and below.
// We also disable this styling on JavaScript disabled devices. This fixes the issue with
// Opera Mini where checking/unchecking doesn't apply styling but potentially leaves other
// more capable browsers with unstyled radio buttons.
.client-js .mw-ui-radio:not( #noop ) {
	[ type='radio' ] {
		& + label {
			// Pseudo `:before` element of the label after the radio now looks like a radio
			&:before {
				background-color: #fff;
				border: 1px solid @colorGray7;
			}
		}
		&:enabled {
			&:hover + label:before {
				border-color: @colorProgressive;
			}

			&:active + label:before {
				background-color: @colorProgressiveActive;
				border-color: @borderColorInputBinaryActive;
			}

			&:checked {
				& + label:before {
					border-color: @borderColorInputBinaryChecked;
				}

				&:focus + label:after {
					border-color: #fff;
				}

				&:hover + label:before {
					border-color: @colorProgressiveHighlight;
				}

				&:active {
					& + label:before {
						border-color: @borderColorInputBinaryActive;
						box-shadow: @boxShadowInputBinaryActive;
					}

					& + label:after {
						border-color: @borderColorInputBinaryActive;
					}
				}
			}
		}

		&:disabled {
			& + label:before {
				background-color: @colorGray12;
				border-color: @colorGray12;
			}

			&:checked + label:before {
				background-color: #fff;
			}
		}
	}
}
